package server1;

import java.awt.BorderLayout;
import java.awt.Font;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import javax.swing.BorderFactory;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.SwingConstants;

public class Server1 extends JFrame{
    private ServerSocket server;
    private Socket socket;
    private BufferedReader clientReader;
    private PrintWriter clientWriter;

    
    private JLabel heading= new JLabel("Server Area");
    private JTextArea messageArea = new JTextArea();
    private JTextField messageInput= new JTextField();
    private Font font = new Font("Roboto",Font.PLAIN,20);
    
    public Server1() {
        try {
            server = new ServerSocket(7777);
            System.out.println("Server is ready to accept connection");
            System.out.println("Waiting...");
            socket = server.accept();
            clientReader = new BufferedReader(new InputStreamReader(socket.getInputStream()));
            clientWriter = new PrintWriter(socket.getOutputStream(), true);

            CreateGUI();
            handleEvents();
            
            startReading();
            //startWriting();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void CreateGUI(){
        this.setTitle("Server Messanger[END]");
        this.setSize(500, 500);
        this.setLocationRelativeTo(null);
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        heading.setFont(font);
        messageInput.setFont(font);
        
        heading.setHorizontalAlignment(SwingConstants.CENTER);
        heading.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
        messageArea.setEditable(false);
        messageInput.setHorizontalAlignment(SwingConstants.CENTER);
        
        this.setLayout(new BorderLayout());
        
        this.add(heading,BorderLayout.NORTH);
        JScrollPane Scroll = new JScrollPane(messageArea);
        this.add(Scroll,BorderLayout.CENTER);
        this.add(messageInput,BorderLayout.SOUTH);
        
        
        
        this.setVisible(true);
        
        
        
    }
    
    
    private void handleEvents()
    {
        messageInput.addKeyListener(new KeyListener(){
            @Override
            public void keyTyped(KeyEvent e) {
                //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public void keyPressed(KeyEvent e) {
                //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public void keyReleased(KeyEvent e) {
                //System.out.println("key released"+e.getKeyCode());  //for getting know about keycode of enter key
                if(e.getKeyCode()==10){
                    String msgToSend = messageInput.getText();
                    messageArea.append("Me: "+msgToSend+"\n");
                    if(msgToSend.startsWith("C")){
                        messageArea.setAlignmentX(LEFT_ALIGNMENT);
                    }
                    clientWriter.println(msgToSend);
                    clientWriter.flush();
                    messageInput.setText("");
                    messageInput.requestFocus();
                }
            }
            
        });
    }
    
    
    public void startReading() {
        Runnable reader = () -> {
            System.out.println("Reader started...");
            try {
                while (true) {
                    String msg = clientReader.readLine();
                    if (msg.equals("exit")) {
                        System.out.println("Client terminated the chat");
                        JOptionPane.showMessageDialog(this, "Server Terminated The Chat");
                        messageInput.setEnabled(false);
                        
                        break;
                    }
                    //System.out.println("Client: " + msg);
                    messageArea.append("Client: " + msg+"\n");
                }
            } catch (Exception e) {
                //e.printStackTrace();
                System.out.println("Connection is closed.");
            }
        };
        new Thread(reader).start();
    }

    public void startWriting() {
        Runnable writer = () -> {
            System.out.println("Writer Started...");
            try {
                BufferedReader userReader = new BufferedReader(new InputStreamReader(System.in));
                while (!socket.isClosed()) {
                    String content = userReader.readLine();
                    
                    
                    
                    clientWriter.println(content);
                    clientWriter.flush();
                    
                    if(content.equals("exit")){
                        socket.close();
                        break;
                    }
                    
                }
            } catch (Exception e) {
                //e.printStackTrace();
                System.out.println("Connection is closed.");
            }
        };
        new Thread(writer).start();
    }

    public static void main(String[] args) {
        System.out.println("This is server...going to start server");
        new Server1();
    }
}
